### Data Parsing Exercise Instructions ###
#
# Extract the raw fields listed below to create a normalized UDM event:
# Raw Log Field     |   Target UDM Field
# ______________________________________
# (n/a)                 metadata.event_type (set the value) -> hint: can start by setting to "GENERIC_EVENT"
# time                  metadata.event_timestamp
# src_ip                principal.ip
# dst_ip                target.ip
# src_port              principal.port
# dst_port              target.port
# fw_ip                 intermediary.ip
# ______________________________________
#
# Extra challenges (if you finish and want to do more...):  
#       - Parse additional fields to UDM -> metadata, network, security_result
#       - Harden your parser by including error handling
#
#
# Resources:
# Use to test your parser:      https://apps.chronicle.security/partner-tools/cbn-validator
# Parser syntax reference:      https://cloud.google.com/chronicle/docs/reference/parser-syntax                  
# UDM Field list:               https://cloud.google.com/chronicle/docs/reference/udm-field-list   
#
#
# Example Raw Log for Reference:
# id=SONIC_FIREWALL sn=SERIAL time="2024-02-14 12:05:33" fw_ip=1.2.3.4 pri=6 c=1024 gcat=2 m=97 msg="Web site hit" srcMac=00:1A:2B:3C:4D:5E src_ip=1.2.3.5 src_port=12345 srcZone=LAN dstMac=00:00:00:00:00:00 dst_ip=1.2.3.6 dst_port=443 dstZone=DMZ proto=tcp sent=3145 rcvd=4829 rule="16 (LAN->DMZ)" app=49395 appName="Service PollyCom_AccessPort_9" op=1 dstname=1.2.3.6 arg=/secars/secars.dll?h=12345 code=64 Category="Not Rated" note="Policy: cfsZonePolicy0, Info:6148" n=3447807


filter {
### Add all parser code here!

# Step 1:  Extract the data from the formatted raw log
    # This part is done for you!
    kv {
        source => "message"
        value_split => "="
        trim_value => '\"'      # removes extraneous quotes
    }

# Step 2:  Format the fields, and assign them to UDM
    
    # Extract the date (hint: the date/time format is "yyyy-MM-dd HH:mm:ss")
    # This part is done for you!
    date {
        match => ["time", "yyyy-MM-dd HH:mm:ss"]
    }
    
    # To do:  Format and assign the rest of the fields -> UDM principal, target, intermediary, metadata, etc
    # HINT!  Some of the values may need to be converted to the proper data format
    
    ### Metadata
    mutate {
        replace => {
            # Hint: you can start with "GENERIC_EVENT", but try to change it to something that better describes the event
            "event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
        }
    }

    ### Intermediary
    # This part is done for you!
    mutate {
        merge => {
            "intermediary_temp.ip" => "fw_ip"
        }
    }
    mutate {
        merge => {
            "event.idm.read_only_udm.intermediary" => "intermediary_temp"
        }
    }


statedump{}

# Step 3:  Output the UDM event
    # This part is done for you!
    mutate {
        merge => {
            "@output" => "event"
        }
    }
}
